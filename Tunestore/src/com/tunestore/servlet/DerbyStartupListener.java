package com.tunestore.servlet;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Date;

import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.derby.drda.NetworkServerControl;

import com.tunestore.util.DBUtil;

public class DerbyStartupListener implements ServletContextListener {
  boolean myServer = false; // Is the server mine to shut down?
  private static final Log log = LogFactory.getLog(DerbyStartupListener.class);

  public void contextDestroyed(ServletContextEvent sce) {
    if (myServer) {
      log.info("Shutting down Derby server");
      try {
        NetworkServerControl nsc = new NetworkServerControl();
        nsc.shutdown();
        log.info("Shut down Derby server successfully");
      } catch (Exception e) {
        log.error(e);
      }
    }
  }

  public void contextInitialized(ServletContextEvent sce) {
    try {
      DBUtil.getConnection();
      log.info("Server already booted");
    } catch (Exception e) {
      // database isn't booted
      myServer = true;
    }
    if (myServer) {
      log.info("Booting Derby");
      try {
        NetworkServerControl nsc = new NetworkServerControl();
        nsc.start(null);

        long maxwait = 5000;
        long begin = new Date().getTime();
        boolean ready = false;
        while (!ready) {
          try {
            nsc.ping();
            ready = true;
          } catch (Exception e) {}
          if (new Date().getTime() >= begin + maxwait) {
            log.error("Couldn't boot derby!");
            throw new Exception("Couldn't boot derby!");
          }
        }
        log.info("Booted Derby successfully");
      } catch (Exception e) {
        log.error(e);
      }
    }

    // Set up the database
    setupDatabase();
  }

  private void setupDatabase() {
    Connection conn = null;
    try {
      Class.forName("org.apache.derby.jdbc.ClientDriver").newInstance();
      conn = DriverManager.getConnection(DBUtil.DB_URL + ";create=true");
      Statement stmt = conn.createStatement();

      // CD's
      ResultSet rs = stmt.executeQuery("SELECT COUNT(*) TBLCNT "
          + "FROM SYS.SYSSCHEMAS " + "INNER JOIN SYS.SYSTABLES "
          + "ON SYS.SYSTABLES.SCHEMAID = SYS.SYSSCHEMAS.SCHEMAID "
          + "WHERE SYS.SYSSCHEMAS.SCHEMANAME = 'APP' "
          + "AND SYS.SYSTABLES.TABLENAME = 'CD'");
      rs.next();
      if (rs.getInt("TBLCNT") <= 0) {
        String create = "CREATE TABLE CD ("
            + "ID INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,"
            + "ARTIST VARCHAR(35) NOT NULL," + "ALBUM VARCHAR(70) NOT NULL,"
            + "IMAGE VARCHAR(25) NOT NULL,"
            + "PRICE DOUBLE NOT NULL DEFAULT 9.99,"
            + "BITS VARCHAR(30) NOT NULL)";
        log.info(create);
        stmt.executeUpdate(create);
        stmt.executeUpdate("INSERT INTO CD (ARTIST,ALBUM,IMAGE,BITS) VALUES ('Paul Anka','Classic Songs My Way','anka.jpg','anka.mp3')");
        stmt.executeUpdate("INSERT INTO CD (ARTIST,ALBUM,IMAGE,BITS) VALUES ('Tony Bennett','The Ultimate Tony Bennett','bennett.jpg','bennett.mp3')");
        stmt.executeUpdate("INSERT INTO CD (ARTIST,ALBUM,IMAGE,BITS) VALUES ('Chumbawamba','Chumbawamba''s Only Hit','chumbawumba.jpg','chumbawamba.mp3')");
        stmt.executeUpdate("INSERT INTO CD (ARTIST,ALBUM,IMAGE,BITS) VALUES ('Perry Cuomo','The Very Best of Perry Cuomo','cuomo.jpg','cuomo.mp3')");
        stmt.executeUpdate("INSERT INTO CD (ARTIST,ALBUM,IMAGE,BITS) VALUES ('Chaka Khan','Funk This','khan.jpg','khan.mp3')");
        stmt.executeUpdate("INSERT INTO CD (ARTIST,ALBUM,IMAGE,BITS) VALUES ('Better Midler','The Divine Miss M','midler.jpg','midler.mp3')");
        stmt.executeUpdate("INSERT INTO CD (ARTIST,ALBUM,IMAGE,BITS) VALUES ('Barry Manilow','The Greatest Songs of the Seventies','manilow.jpg','manilow.mp3')");
        stmt.executeUpdate("INSERT INTO CD (ARTIST,ALBUM,IMAGE,BITS) VALUES ('Wayne Newton','Greatest Hits','newton.jpg','newton.mp3')");
        stmt.executeUpdate("INSERT INTO CD (ARTIST,ALBUM,IMAGE,BITS) VALUES ('Sade','The Best of Sade','sade.jpg','sade.mp3')");
        stmt.executeUpdate("INSERT INTO CD (ARTIST,ALBUM,IMAGE,BITS) VALUES ('Frank Sinatra','The Very Best of Frank Sinatra','sinatra.jpg','sinatra.mp3')");
      }

      // Tuneuser
      rs = stmt.executeQuery("SELECT COUNT(*) TBLCNT " + "FROM SYS.SYSSCHEMAS "
          + "INNER JOIN SYS.SYSTABLES "
          + "ON SYS.SYSTABLES.SCHEMAID = SYS.SYSSCHEMAS.SCHEMAID "
          + "WHERE SYS.SYSSCHEMAS.SCHEMANAME = 'APP' "
          + "AND SYS.SYSTABLES.TABLENAME = 'TUNEUSER'");
      rs.next();
      if (rs.getInt("TBLCNT") <= 0) {
        String create = "CREATE TABLE TUNEUSER ("
            + "USERNAME VARCHAR(30) NOT NULL PRIMARY KEY,"
            + "PASSWORD VARCHAR(35) NOT NULL,"
            + "BALANCE DOUBLE NOT NULL DEFAULT 0.00)";
        log.info(create);
        stmt.executeUpdate(create);
      }

      // Persistent Logins
      rs = stmt.executeQuery("SELECT COUNT(*) TBLCNT " + "FROM SYS.SYSSCHEMAS "
          + "INNER JOIN SYS.SYSTABLES "
          + "ON SYS.SYSTABLES.SCHEMAID = SYS.SYSSCHEMAS.SCHEMAID "
          + "WHERE SYS.SYSSCHEMAS.SCHEMANAME = 'APP' "
          + "AND SYS.SYSTABLES.TABLENAME = 'PERSISTENTLOGIN'");
      rs.next();
      if (rs.getInt("TBLCNT") <= 0) {
        String create = "CREATE TABLE PERSISTENTLOGIN ("
            + "TOKEN CHAR(50) NOT NULL," + "TUNEUSER VARCHAR(30) NOT NULL,"
            + "CONSTRAINT PERSISTENTLOGIN_PK PRIMARY KEY (TOKEN),"
            + "CONSTRAINT TUNEUSER_FK " + "FOREIGN KEY (TUNEUSER) "
            + "REFERENCES TUNEUSER (USERNAME))";
        log.info(create);
        stmt.executeUpdate(create);
      }
      
      // Tuneuser to CD Mapping
      rs = stmt.executeQuery("SELECT COUNT(*) TBLCNT "
          + "FROM SYS.SYSSCHEMAS "
          + "INNER JOIN SYS.SYSTABLES "
          + "ON SYS.SYSTABLES.SCHEMAID = SYS.SYSSCHEMAS.SCHEMAID "
          + "WHERE SYS.SYSSCHEMAS.SCHEMANAME = 'APP' "
          + "AND SYS.SYSTABLES.TABLENAME = 'TUNEUSER_CD'");
      rs.next();
      if (rs.getInt("TBLCNT") <= 0) {
        String create = "CREATE TABLE TUNEUSER_CD ("
          + "TUNEUSER VARCHAR(30) NOT NULL, "
          + "CD INT NOT NULL, "
          + "CONSTRAINT TUNEUSER_CD_PK PRIMARY KEY (TUNEUSER,CD), "
          + "CONSTRAINT TUNEUSER_CD_TUNEUSER_FK FOREIGN KEY (TUNEUSER) "
          + "REFERENCES TUNEUSER (USERNAME) ON DELETE CASCADE, "
          + "CONSTRAINT TUNEUSER_CD_CD FOREIGN KEY (CD) "
          + "REFERENCES CD (ID) ON DELETE CASCADE)";
        log.info(create);
        stmt.executeUpdate(create);
      }
      
      // Friends Mapping
      rs = stmt.executeQuery("SELECT COUNT(*) TBLCNT "
          + "FROM SYS.SYSSCHEMAS "
          + "INNER JOIN SYS.SYSTABLES "
          + "ON SYS.SYSTABLES.SCHEMAID = SYS.SYSSCHEMAS.SCHEMAID "
          + "WHERE SYS.SYSSCHEMAS.SCHEMANAME = 'APP' "
          + "AND SYS.SYSTABLES.TABLENAME = 'FRIENDSHIP'");
      rs.next();
      if (rs.getInt("TBLCNT") <= 0) {
        String create = "CREATE TABLE FRIENDSHIP ("
          + "TUNEUSER1 VARCHAR(30) NOT NULL, "
          + "TUNEUSER2 VARCHAR(30) NOT NULL, "
          + "APPROVED CHAR(1) NOT NULL DEFAULT 'N', "
          + "CONSTRAINT FRIENDSHIP_PK PRIMARY KEY (TUNEUSER1,TUNEUSER2), "
          + "CONSTRAINT FRIENDSHIP_TUNEUSER1_FK FOREIGN KEY (TUNEUSER1) "
          + "REFERENCES TUNEUSER (USERNAME) ON DELETE CASCADE, "
          + "CONSTRAINT FRIENDSHIP_TUNEUSER2_FK FOREIGN KEY (TUNEUSER2) "
          + "REFERENCES TUNEUSER (USERNAME) ON DELETE CASCADE)";
        log.info(create);
        stmt.executeUpdate(create);
      }
      
      // Comments table
      rs = stmt.executeQuery("SELECT COUNT(*) TBLCNT "
          + "FROM SYS.SYSSCHEMAS "
          + "INNER JOIN SYS.SYSTABLES "
          + "ON SYS.SYSTABLES.SCHEMAID = SYS.SYSSCHEMAS.SCHEMAID "
          + "WHERE SYS.SYSSCHEMAS.SCHEMANAME = 'APP' "
          + "AND SYS.SYSTABLES.TABLENAME = 'COMMENT'");
      rs.next();
      if (rs.getInt("TBLCNT") <= 0) {
        String create = "CREATE TABLE COMMENT ("
          + "ID INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,"
          + "CD INT NOT NULL, "
          + "TUNEUSER VARCHAR(30) NOT NULL, "
          + "COMMENT LONG VARCHAR NOT NULL DEFAULT '', "
          + "CONSTRAINT COMMENT_CD_FK FOREIGN KEY (CD) "
          + "REFERENCES CD (ID) ON DELETE CASCADE, "
          + "CONSTRAINT COMMENT_TUNEUSER_FK FOREIGN KEY (TUNEUSER) "
          + "REFERENCES TUNEUSER (USERNAME) ON DELETE CASCADE)";
        log.info(create);
        stmt.executeUpdate(create);
      }
    } catch (Exception e) {
      e.printStackTrace();
    } finally {
      if (conn != null) {
        try {
          conn.close();
        } catch (Exception e) {
        }
      }
    }
  }
}
